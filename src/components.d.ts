/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MinMaxValue } from "./components/input/model";
import { Typography } from "./components/mdc/typography/model";
export namespace Components {
    interface Co2Button {
        /**
          * HTML disabled attribute
         */
        "isDisabled"?: boolean;
    }
    interface Co2Input {
        /**
          * HTML checked attribute
         */
        "isChecked"?: boolean;
        /**
          * HTML disabled attribute
         */
        "isDisabled"?: boolean;
        /**
          * Label text
         */
        "label"?: string;
        "maxLength"?: number;
        "maxValue"?: MinMaxValue;
        "minLength"?: number;
        "minValue"?: MinMaxValue;
        /**
          * HTML name attribute
         */
        "name"?: string;
        "type"?: string;
        /**
          * HTML value attribute
         */
        "value"?: string;
    }
    interface Co2RippleEffect {
        /**
          * Whether or not the surface the ripple is acting upon is active
         */
        "active": boolean | undefined;
        /**
          * Disables the ripple effect
         */
        "disabled": boolean;
        /**
          * The node which should trigger the Ripple Effect
         */
        "interactionNode": HTMLElement;
        /**
          * Whether or not the ripple is unbounded
         */
        "unbounded": boolean;
    }
    interface Co2Switch {
        "isChecked": boolean;
        "isDisabled": boolean;
        "label": string;
    }
    interface Co2TextArea {
        "customPlaceholder": string;
        "isDisabled": boolean;
        "maxLength": number;
        "value": string;
    }
    interface Co2Textarea {
        "customPlaceholder": string;
        "isDisabled": boolean;
        "value": string;
    }
    interface Co2Todo {
        "index"?: number;
        "isDone"?: boolean;
        "task": string;
    }
    interface Co2Typography {
        "type": Typography;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
declare global {
    interface HTMLCo2ButtonElement extends Components.Co2Button, HTMLStencilElement {
    }
    var HTMLCo2ButtonElement: {
        prototype: HTMLCo2ButtonElement;
        new (): HTMLCo2ButtonElement;
    };
    interface HTMLCo2InputElement extends Components.Co2Input, HTMLStencilElement {
    }
    var HTMLCo2InputElement: {
        prototype: HTMLCo2InputElement;
        new (): HTMLCo2InputElement;
    };
    interface HTMLCo2RippleEffectElement extends Components.Co2RippleEffect, HTMLStencilElement {
    }
    var HTMLCo2RippleEffectElement: {
        prototype: HTMLCo2RippleEffectElement;
        new (): HTMLCo2RippleEffectElement;
    };
    interface HTMLCo2SwitchElement extends Components.Co2Switch, HTMLStencilElement {
    }
    var HTMLCo2SwitchElement: {
        prototype: HTMLCo2SwitchElement;
        new (): HTMLCo2SwitchElement;
    };
    interface HTMLCo2TextAreaElement extends Components.Co2TextArea, HTMLStencilElement {
    }
    var HTMLCo2TextAreaElement: {
        prototype: HTMLCo2TextAreaElement;
        new (): HTMLCo2TextAreaElement;
    };
    interface HTMLCo2TextareaElement extends Components.Co2Textarea, HTMLStencilElement {
    }
    var HTMLCo2TextareaElement: {
        prototype: HTMLCo2TextareaElement;
        new (): HTMLCo2TextareaElement;
    };
    interface HTMLCo2TodoElement extends Components.Co2Todo, HTMLStencilElement {
    }
    var HTMLCo2TodoElement: {
        prototype: HTMLCo2TodoElement;
        new (): HTMLCo2TodoElement;
    };
    interface HTMLCo2TypographyElement extends Components.Co2Typography, HTMLStencilElement {
    }
    var HTMLCo2TypographyElement: {
        prototype: HTMLCo2TypographyElement;
        new (): HTMLCo2TypographyElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "co2-button": HTMLCo2ButtonElement;
        "co2-input": HTMLCo2InputElement;
        "co2-ripple-effect": HTMLCo2RippleEffectElement;
        "co2-switch": HTMLCo2SwitchElement;
        "co2-text-area": HTMLCo2TextAreaElement;
        "co2-textarea": HTMLCo2TextareaElement;
        "co2-todo": HTMLCo2TodoElement;
        "co2-typography": HTMLCo2TypographyElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface Co2Button {
        /**
          * HTML disabled attribute
         */
        "isDisabled"?: boolean;
        /**
          * HTML onBlur event
         */
        "onScaleClick"?: (event: CustomEvent<any>) => void;
    }
    interface Co2Input {
        /**
          * HTML checked attribute
         */
        "isChecked"?: boolean;
        /**
          * HTML disabled attribute
         */
        "isDisabled"?: boolean;
        /**
          * Label text
         */
        "label"?: string;
        "maxLength"?: number;
        "maxValue"?: MinMaxValue;
        "minLength"?: number;
        "minValue"?: MinMaxValue;
        /**
          * HTML name attribute
         */
        "name"?: string;
        /**
          * HTML onBlur event
         */
        "onScaleBlur"?: (event: CustomEvent<any>) => void;
        /**
          * HTML onChange|onInput events (depending on type)
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        "type"?: string;
        /**
          * HTML value attribute
         */
        "value"?: string;
    }
    interface Co2RippleEffect {
        /**
          * Whether or not the surface the ripple is acting upon is active
         */
        "active"?: boolean | undefined;
        /**
          * Disables the ripple effect
         */
        "disabled"?: boolean;
        /**
          * The node which should trigger the Ripple Effect
         */
        "interactionNode"?: HTMLElement;
        /**
          * Whether or not the ripple is unbounded
         */
        "unbounded"?: boolean;
    }
    interface Co2Switch {
        "isChecked"?: boolean;
        "isDisabled"?: boolean;
        "label"?: string;
        /**
          * HTML onChange|onInput events (depending on type)
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
    }
    interface Co2TextArea {
        "customPlaceholder"?: string;
        "isDisabled"?: boolean;
        "maxLength"?: number;
        /**
          * HTML onBlur event
         */
        "onScaleBlur"?: (event: CustomEvent<any>) => void;
        /**
          * HTML onChange|onInput events (depending on type)
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        "value"?: string;
    }
    interface Co2Textarea {
        "customPlaceholder"?: string;
        "isDisabled"?: boolean;
        /**
          * HTML onBlur event
         */
        "onScaleBlur"?: (event: CustomEvent<any>) => void;
        /**
          * HTML onChange|onInput events (depending on type)
         */
        "onScaleChange"?: (event: CustomEvent<any>) => void;
        "value"?: string;
    }
    interface Co2Todo {
        "index"?: number;
        "isDone"?: boolean;
        "task"?: string;
    }
    interface Co2Typography {
        "type"?: Typography;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "co2-button": Co2Button;
        "co2-input": Co2Input;
        "co2-ripple-effect": Co2RippleEffect;
        "co2-switch": Co2Switch;
        "co2-text-area": Co2TextArea;
        "co2-textarea": Co2Textarea;
        "co2-todo": Co2Todo;
        "co2-typography": Co2Typography;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "co2-button": LocalJSX.Co2Button & JSXBase.HTMLAttributes<HTMLCo2ButtonElement>;
            "co2-input": LocalJSX.Co2Input & JSXBase.HTMLAttributes<HTMLCo2InputElement>;
            "co2-ripple-effect": LocalJSX.Co2RippleEffect & JSXBase.HTMLAttributes<HTMLCo2RippleEffectElement>;
            "co2-switch": LocalJSX.Co2Switch & JSXBase.HTMLAttributes<HTMLCo2SwitchElement>;
            "co2-text-area": LocalJSX.Co2TextArea & JSXBase.HTMLAttributes<HTMLCo2TextAreaElement>;
            "co2-textarea": LocalJSX.Co2Textarea & JSXBase.HTMLAttributes<HTMLCo2TextareaElement>;
            "co2-todo": LocalJSX.Co2Todo & JSXBase.HTMLAttributes<HTMLCo2TodoElement>;
            "co2-typography": LocalJSX.Co2Typography & JSXBase.HTMLAttributes<HTMLCo2TypographyElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
